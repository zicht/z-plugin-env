# @version ">=2.0"

# Build targets (environments)
envs: ~

# Whenever 'development' is mentioned, that is considered the local environment
local_env: '"development"'

tasks:
    # Connect to the remote shell using ssh
    env.ssh:
        help: "Connect to the remote SSH"
        flags:
            tty: true
        args:
            target_env: ?
            cmd: ? "bash --login"
        do:
            - @(if envs[target_env] == null) echo "Unable to ssh. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - @(with tty as INTERACTIVE) ssh -$(tty ? "t")q -p $(envs[target_env].ssh_port) $(envs[target_env].ssh) "cd $(envs[target_env].root); $(cmd)"

    # Connect to the remote mysql shell using ssh
    env.mysql:
        unless: !ssh.connectable(envs[target_env].ssh)

        help: |
            Connect to the remote MySQL.

            This assumes that the local user on the remote machine has access to the local database.
            Configure the remote ~/.my.cnf if this is not the case.
        args:
            target_env: ?
        do:
            - @(if envs[target_env] == null) echo "Unable to mysql. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - @(with true as INTERACTIVE) ssh -tq -p $(envs[target_env].ssh_port) $(envs[target_env].ssh) "mysql $(envs[target_env].db)"

    # Initialize the SSH session by copying a local public key to the remote machine
    env.ssh-copy-id:
        unless: ssh.connectable(envs[target_env].ssh)
        help: |
            Initialize an SSH key exchange

            Copies your local identity to the remote environment. The step is skipped if the environment
            already is connectable
        args:
            target_env: ?
        do:
            - @(if envs[target_env] == null) echo "Unable to ssh-copy-id. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - @(with true as INTERACTIVE) ssh-copy-id -p $(envs[target_env].ssh_port) $(envs[target_env].ssh)

    # Show the deployed version of the remote machine
    env.version:
        help: |
            Show which version is currently deployed at the remote environment.

            Downloads the remote revision file and shows which version is specified in it.
        args:
            target_env: ?
        do:
            - @(if envs[target_env] == null) echo "Unable to check version. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - echo "$(env.versionat(target_env, VERBOSE))"

    env.diff:
        help: |
            Compare the current version to the version at a remote environment

            Downloads the remote revision file to determine what version is currently there and executes a diff on them
        args:
            target_env: ?
            version: ? vcs.current
        do:
            - @(if envs[target_env] == null) echo "Unable to diff. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - $(vcs.diff(env.versionat(target_env), version, VERBOSE))

    env.fdiff:
        help: |
            Compare the physical file in the build dir on disk with a remote physical file.

            You can pass the --prefix="." to use your local working tree as the base for comparison
        args:
            target_env: ?
            path: ?
        opts:
            prefix: build.dir

        do:
            - @(if envs[target_env] == null) echo "Unable to fdiff. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - ssh -p $(envs[target_env].ssh_port) $(envs[target_env].ssh) "cat $(envs[target_env].root)$(path)" | diff $(prefix)/$(path) - || true

    env.get:
        help: |
            Copy file(s) from remote environment
        flags:
            recursive: false
        args:
            target_env: ?
            file: ?
        do:
            - @(if envs[target_env] == null) echo "Unable to get. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - scp -P $(envs[target_env].ssh_port) $(recursive ? "-r") $(envs[target_env].ssh):$(envs[target_env].root)$(file) ./$(file)

    env.put:
        help: |
            Copy files to remote environment
        flags:
            recursive: false
        args:
            target_env: ?
            file: ?
        do:
            - @(if envs[target_env] == null) echo "Unable to put. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - scp -P $(envs[target_env].ssh_port) $(recursive ? "-r") ./$(file) $(envs[target_env].ssh):$(envs[target_env].root)$(file)

    env.port-forward:
        help: |
            Do a port forward to a remote env
        args:
            target_env: ?
            remote: ?
            local: ? remote
        opts:
            localhost: '"localhost"'
        do:
            - @(if envs[target_env] == null) echo "Unable to port-forward. Unknown target_env \"$(target_env)\". Try one of $(join(", ", keys(envs)))" && exit 1
            - @(with true as INTERACTIVE) ssh -t -L $(remote):$(localhost):$(local) -p $(envs[target_env].ssh_port) $(envs[target_env].ssh)
